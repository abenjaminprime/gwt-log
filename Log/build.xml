<project name="gwt-log" default="dist">

	<target name="init">
		<!-- Global Properties -->
		<property environment="env" />

		<!-- build.host.platform property -->
		<condition property="build.host.islinux">
			<and>
				<os family="unix" />
				<not>
					<contains string="${os.name}" substring="mac" casesensitive="false" />
				</not>
			</and>
		</condition>
		<condition property="build.host.platform" value="linux">
			<isset property="build.host.islinux" />
		</condition>

		<condition property="build.host.ismac">
			<and>
				<os family="unix" />
				<contains string="${os.name}" substring="mac" casesensitive="false" />
			</and>
		</condition>
		<condition property="build.host.platform" value="mac">
			<isset property="build.host.ismac" />
		</condition>

		<condition property="build.host.iswindows">
			<os family="windows" />
		</condition>
		<condition property="build.host.platform" value="windows">
			<isset property="build.host.iswindows" />
		</condition>
		<fail unless="build.host.platform" message="Building on ${os.name} is not supported" />

		<condition property="junit.platform.args" value="-XstartOnFirstThread" else="">
			<equals arg1="${build.host.platform}" arg2="mac" casesensitive="false" />
		</condition>


		<!-- gwt.location property -->
		<condition property="gwt.location.default" value="${env.GWT14_HOME}" else="">
			<isset property="env.GWT14_HOME" />
		</condition>
		<input addproperty="gwt.location" defaultvalue="${gwt.location.default}" message="GWT 1.4 install directory" />

		<!-- gwt.tools property -->
		<condition property="gwt.tools" value="${env.GWT_TOOLS}" else="${gwt.root}/../tools">
			<isset property="env.GWT_TOOLS" />
		</condition>
		<fail message="can't find gwt tools, please set gwt.tools property" unless="gwt.tools" />

		<!-- gwt tools stuff -->
		<property name="gwt.tools.lib" location="${gwt.tools}/lib" />
		<property name="gwt.tools.antlib" location="${gwt.tools}/antlib" />

		<!-- javac defaults -->
		<property name="javac.debug" value="true" />
		<property name="javac.debuglevel" value="lines,vars,source" />
		<property name="javac.encoding" value="utf-8" />
		<property name="javac.nowarn" value="true" />
		<property name="javac.source" value="1.4" />
		<property name="javac.target" value="1.4" />

		<!-- gwt jars -->
		<property name="gwt.user.jar" location="${gwt.location}/gwt-user.jar" />
		<property name="gwt.dev.jar" location="${gwt.location}/gwt-dev-${build.host.platform}.jar" />

		<!-- Pulls in tasks defined in ant-contrib, i.e. foreach -->
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="${gwt.tools.antlib}/ant-contrib-1.0b3.jar" />
			</classpath>
		</taskdef>

		<!-- gwt-log.libdir property -->
		<input addproperty="gwt-log.libdir" defaultvalue="/fred/java/lib/gwt-log" message="gwt-log library directory" />

		<!-- gwt-log.version property -->
		<input addproperty="gwt-log.version" defaultvalue="0.0.0" message="gwt-log library version" />

		<!-- gwt-log.jar property -->
		<property name="gwt-log.jar" value="gwt-log-${gwt-log.version}.jar" />

		<!-- gwt-log.javadoc-jar property -->
		<property name="gwt-log.javadoc-jar" value="gwt-log-${gwt-log.version}-javadoc.jar" />

		<!-- Prevent overwriting existing libraries -->
		<available file="${gwt-log.libdir}/${gwt-log.jar}" property="gwt-log.jar-exists" />
		<condition property="gwt-log.fail-overwrite">
			<and>
				<not>
					<equals arg1="${gwt-log.version}" arg2="0.0.0" />
				</not>
				<isset property="gwt-log.jar-exists" />
			</and>
		</condition>
		<fail if="gwt-log.fail-overwrite" message="Cannot overwrite existing jar file ${gwt-log.libdir}/${gwt-log.jar}" />

	</target>


	<!-- Replace @GWT_LOG_VERION@ with actual version of build -->
	<target name="filter" description="Filters distro files for versioning">
		<mkdir dir="build/src" />
		<mkdir dir="build/demo" />

		<copy todir="build/src">
			<fileset file="LICENSE" />
			<fileset file="NOTICE" />
			<fileset dir="src" />
			<filterset>
				<filter token="GWT_LOG_VERSION" value="${gwt-log.version}" />
			</filterset>
		</copy>

		<copy todir="build/demo">
			<fileset dir="build/src" />
			<fileset dir="demo" />
			<filterset>
				<filter token="GWT_LOG_VERSION" value="${gwt-log.version}" />
			</filterset>
		</copy>

	</target>

	<target name="build" depends="init,clean,filter">
		<mkdir dir="build/out/src" />
		<mkdir dir="build/out/demo" />

		<javac compiler="javac1.4" listfiles="true" destdir="build/out/src" debug="${javac.debug}" debuglevel="${javac.debuglevel}" source="${javac.source}" target="${javac.target}" nowarn="${javac.nowarn}" encoding="${javac.encoding}">
			<src path="build/src" />
			<classpath location="${gwt.location}/gwt-user.jar" />
			<classpath location="${gwt.location}/gwt-dev-${build.host.platform}.jar" />
		</javac>

		<javac compiler="javac1.4" listfiles="true" destdir="build/out/demo" debug="${javac.debug}" debuglevel="${javac.debuglevel}" source="${javac.source}" target="${javac.target}" nowarn="${javac.nowarn}" encoding="${javac.encoding}">
			<src path="build/demo" />
			<classpath location="${gwt.location}/gwt-user.jar" />
			<classpath location="${gwt.location}/gwt-dev-${build.host.platform}.jar" />
		</javac>

		<copy todir="build/out/src">
			<fileset dir="build/src">
				<include name="**/LICENSE" />
				<include name="**/NOTICE" />
				<include name="**/*.java" />
				<include name="**/*.gwt.xml" />
				<include name="**/public/**" />
			</fileset>
		</copy>

		<copy todir="build/out/demo">
			<fileset dir="build/demo">
				<include name="**/LICENSE" />
				<include name="**/NOTICE" />
				<include name="**/*.java" />
				<include name="**/*.gwt.xml" />
				<include name="**/public/**" />
			</fileset>
		</copy>

		<antcall target="gwtc" />
	</target>

	<target name="gwtc" description="Compile to JavaScript">
		<outofdate>
			<sourcefiles>
				<fileset dir="build/src" />
				<fileset dir="build/demo" />
				<fileset file="${gwt.user.jar}" />
				<fileset file="${gwt.dev.jar}" />
			</sourcefiles>

			<targetfiles path="build/www/com.allen_sauer.gwt.log.demo.LogDemo/com.allen_sauer.gwt.log.demo.LogDemo.nocache.js" />
			<sequential>
				<mkdir dir="build/www" />
				<java dir="build" classname="com.google.gwt.dev.GWTCompiler" classpath="build/src:build/demo:${gwt.user.jar}:${gwt.dev.jar}" fork="yes" failonerror="true">
					<arg value="-out" />
					<arg path="build/www" />

					<arg value="com.allen_sauer.gwt.log.demo.LogDemo" />

					<arg value="-style" />
					<arg value="PRETTY" />
				</java>
			</sequential>
		</outofdate>
	</target>

	<target name="javadoc">
		<javadoc access="protected" classpath="${gwt.user.jar}:{gwt.dev.jar}" destdir="build/javadoc" doctitle="gwt-log - Logging for your Google-Web-Toolkit Projects" encoding="UTF-8" failonerror="true" source="1.4" sourcepath="build/demo" />
	</target>

	<target name="tag">
		<exec executable="svn">
			<arg value="info" />
			<arg value="https://gwt-log.googlecode.com/svn/trunk" />
		</exec>
		<echo message="" />
		<echo message="*********************************************************************************" />
		<echo message="svn cp . https://gwt-log.googlecode.com/svn/tags/gwt-log-${gwt-log.version}-r____" />
		<echo message="*********************************************************************************" />
		<echo message="" />
	</target>

	<target name="dist" depends="build,javadoc">
		<mkdir dir="build/dist" />

		<jar destfile="build/dist/${gwt-log.jar}">
			<fileset dir="build/out/src" />
		</jar>
		<!--
		<jar basedir="build/javadoc" destfile="build/dist/${gwt-log.javadoc-jar}" />
    -->

		<copy todir="${gwt-log.libdir}">
			<fileset dir="build/dist" />
		</copy>

		<antcall target="tag" />
	</target>

	<target name="clean">
		<delete dir="build" />
	</target>

</project>
