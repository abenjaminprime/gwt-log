<!-- 
  Copyright 2007 Fred Sauer
  
  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
-->
<module>

  <!--
    There are a few ways to set the log_level:
    
    1) At compile time via the 'log_level' Deferred Binding property.

       This speeds up compile time by reducing the number of compile time combinations.
       The 'log_level' property determines the minimum log level available at runtime.
       Code related to lower levels of logging are dead code eliminated by the
       GWT Compiler (to the extent possible). The default value is 'OFF', which means
       that logging code should be entirely, or almost entirely, eliminated.
       
       During development you'll most likely want to create a debug build by adding
       this to your module's *.gwt.xml file:    

           <set-property name="log_level" value="DEBUG"/>

       To eliminate all debugging code (to the extent supported by the GWT Compiler)    
       and turn off logging, add this to your module's production *.gwt.xml file:    

           <set-property name="log_level" value="OFF"/>


    2) Select an existing compile time log level via the 'log_level' URL parameter.
    
       For example, to select the INFO log level, use:
       
           http[s]://hostame:port/path/to/your/module/Module.html?log_level=INFO
           
           

    3) Select an existing compile time log level via a GWT meta tag.
    
       For example, to select the DEBUG log level:
       
           <html>
             <head>
               <meta name="gwt:property" content="log_level=DEBUG">
               <script language='javascript' src='com.example.gwt.YourModule.nocache.js'></script>
             </head>
             <body>
                ..
             </body>
           </html>    


    
    4) At runtime via Log.setCurrentLogLevel(int level)
    
       The current log level can be adjusted programmatically at runtime. An alert
       dialog box will be shown if you attempt to set a runtime log level lower than
       the compile time log level.
       
       For example, to temporarily turn off logging, call:

           Log.setCurrentLogLevel(Log.LOG_LEVEL_OFF);

       To only see ERROR messages or higher, call:

           Log.setCurrentLogLevel(Log.LOG_LEVEL_ERROR);



    5) Define additional log levels in your *.gwt.xml module file.
    
       For example, to add a new 'MY_LEVEL' add:
       
           <extend-property name="log_level" values="MY_LEVEL"/>
    
    
  -->
  
	<!-- Inherit the core Web Toolkit stuff.-->
	<inherits name='com.google.gwt.user.User'/>

  <!-- Include CSS        -->
	<stylesheet src='Log.css'/>
	
  <!-- Define log levels                                                   -->
  <define-property name="log_level" values="DEBUG,INFO,WARN,ERROR,FATAL,OFF"/>

  <property-provider name="log_level">
    <![CDATA[
    try {
          var log_level;
          
          // Look for the log_level as a url argument
          if (log_level == null) {
            var regex = new RegExp("[\\?&]log_level=([^&#]*)");
            var results = regex.exec(location.search);
            if (results != null) {
              log_level = results[1];
            }
          }      
          
          // Check GWT meta property
          if (log_level == null) {  
            log_level = __gwt_getMetaProperty("log_level")   
          }
           
          if (log_level == null) {
            return "OFF";
          }
           
          return log_level;
        } catch(e){
          alert("Unexpected exception in 'log_level' detection, using 'OFF': " + e);
          return "OFF";
        }
    ]]>
  </property-provider>

  <replace-with class="com.allen_sauer.gwt.log.client.impl.LogImplDebug">
    <when-type-is class="com.allen_sauer.gwt.log.client.impl.LogImpl"/>
    <when-property-is name="log_level" value="DEBUG"/>
  </replace-with>
  
  <replace-with class="com.allen_sauer.gwt.log.client.impl.LogImplInfo">
    <when-type-is class="com.allen_sauer.gwt.log.client.impl.LogImpl"/>
    <when-property-is name="log_level" value="INFO"/>
  </replace-with>
  
  <replace-with class="com.allen_sauer.gwt.log.client.impl.LogImplWarn">
    <when-type-is class="com.allen_sauer.gwt.log.client.impl.LogImpl"/>
    <when-property-is name="log_level" value="WARN"/>
  </replace-with>
  
  <replace-with class="com.allen_sauer.gwt.log.client.impl.LogImplError">
    <when-type-is class="com.allen_sauer.gwt.log.client.impl.LogImpl"/>
    <when-property-is name="log_level" value="ERROR"/>
  </replace-with>
  
  <replace-with class="com.allen_sauer.gwt.log.client.impl.LogImplFatal">
    <when-type-is class="com.allen_sauer.gwt.log.client.impl.LogImpl"/>
    <when-property-is name="log_level" value="FATAL"/>
  </replace-with>
  
  <replace-with class="com.allen_sauer.gwt.log.client.impl.LogImplOff">
    <when-type-is class="com.allen_sauer.gwt.log.client.impl.LogImpl"/>
    <when-property-is name="log_level" value="OFF"/>
  </replace-with>
  
</module>
