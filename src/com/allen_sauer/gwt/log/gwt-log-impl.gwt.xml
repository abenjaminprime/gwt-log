<?xml version="1.0" encoding="UTF-8"?>
<!-- 
  Copyright 2008 Fred Sauer
  
  Licensed under the Apache License, Version 2.0 (the "License"); you may not
  use this file except in compliance with the License. You may obtain a copy of
  the License at
  
  http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
-->
<module>

  <!-- Inherit the core Web Toolkit stuff. -->
  <inherits name="com.google.gwt.user.User" />


  <!-- Include CSS             -->
  <stylesheet src="gwt-log.css" />




  <!--
    Provide formatting via 'log_pattern' property.
  -->
  <generate-with class="com.allen_sauer.gwt.log.rebind.LogMessageFormatterGenerator">
    <when-type-assignable class="com.allen_sauer.gwt.log.client.LogMessageFormatter" />
  </generate-with>




  <!--
    Note: This property-provider will only used once the list of valid
    values for 'log_level' is expanded, beyond the default 'OFF'
    value, via an 'extend-property' tag.
  -->
  <property-provider name="log_level">
    <![CDATA[
      var log_level;
      
      // Look for the log_level as a url argument
      if (log_level == null) {
        var regex = new RegExp("[\\?&]log_level=([^&#]*)");
        var results = regex.exec(location.search);
        if (results != null) {
          log_level = results[1];
        }
      }      
      
      // Look for GWT meta property
      if (log_level == null) {  
        log_level = __gwt_getMetaProperty("log_level")   
      }

      // Find next lowest log level
      if (!__gwt_isKnownPropertyValue("log_level", log_level)) {
        var levels = ["TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL", "OFF"];
        var possibleLevel = null;
        var foundRequestedLevel = false;
        for (i in levels) {
          foundRequestedLevel |= (log_level == levels[i]);
          if (__gwt_isKnownPropertyValue("log_level", levels[i])) {
            possibleLevel = levels[i];
          }
          if (i == levels.length - 1 || (foundRequestedLevel && possibleLevel != null)) {
            log_level = possibleLevel;
            break;
          }
        }
      }
      
      return log_level;
    ]]>
  </property-provider>


  <!-- ConsoleLogger -->

  <define-property name="log_ConsoleLogger" values="ENABLED, DISABLED" />

  <replace-with class="com.allen_sauer.gwt.log.client.NullLogger">
    <when-type-is class="com.allen_sauer.gwt.log.client.ConsoleLogger" />
    <none>
      <when-property-is name="log_ConsoleLogger" value="ENABLED" />
    </none>
  </replace-with>


  <!-- DivLogger -->

  <define-property name="log_DivLogger" values="ENABLED, DISABLED" />

  <replace-with class="com.allen_sauer.gwt.log.client.NullLogger">
    <when-type-is class="com.allen_sauer.gwt.log.client.DivLogger" />
    <none>
      <when-property-is name="log_DivLogger" value="ENABLED" />
    </none>
  </replace-with>


  <!-- FirebugLogger -->

  <define-property name="log_FirebugLogger" values="ENABLED, DISABLED" />

  <replace-with class="com.allen_sauer.gwt.log.client.NullLogger">
    <when-type-is class="com.allen_sauer.gwt.log.client.FirebugLogger" />
    <none>
      <when-property-is name="log_FirebugLogger" value="ENABLED" />
    </none>
  </replace-with>


  <!-- GWTLogger -->

  <define-property name="log_GWTLogger" values="ENABLED, DISABLED" />

  <replace-with class="com.allen_sauer.gwt.log.client.NullLogger">
    <when-type-is class="com.allen_sauer.gwt.log.client.GWTLogger" />
    <none>
      <when-property-is name="log_GWTLogger" value="ENABLED" />
    </none>
  </replace-with>


  <!-- SystemLogger -->

  <define-property name="log_SystemLogger" values="ENABLED, DISABLED" />

  <replace-with class="com.allen_sauer.gwt.log.client.NullLogger">
    <when-type-is class="com.allen_sauer.gwt.log.client.SystemLogger" />
    <none>
      <when-property-is name="log_SystemLogger" value="ENABLED" />
    </none>
  </replace-with>


  <!-- RemoteLogger -->

  <define-property name="log_RemoteLogger" values="ENABLED, DISABLED" />

  <replace-with class="com.allen_sauer.gwt.log.client.NullLogger">
    <when-type-is class="com.allen_sauer.gwt.log.client.RemoteLogger" />
    <none>
      <when-property-is name="log_RemoteLogger" value="ENABLED" />
    </none>
  </replace-with>

  <servlet path="/gwt-log" class="com.allen_sauer.gwt.log.server.RemoteLoggerServiceImpl" />


  <!-- WindowLogger -->

  <define-property name="log_WindowLogger" values="ENABLED, DISABLED" />

  <replace-with class="com.allen_sauer.gwt.log.client.NullLogger">
    <when-type-is class="com.allen_sauer.gwt.log.client.WindowLogger" />
    <none>
      <when-property-is name="log_WindowLogger" value="ENABLED" />
    </none>
  </replace-with>


  <!--  Log level dependent implementations -->

  <replace-with class="com.allen_sauer.gwt.log.client.impl.LogImplTrace">
    <when-type-is class="com.allen_sauer.gwt.log.client.impl.LogImpl" />
    <when-property-is name="log_level" value="TRACE" />
  </replace-with>

  <replace-with class="com.allen_sauer.gwt.log.client.impl.LogImplDebug">
    <when-type-is class="com.allen_sauer.gwt.log.client.impl.LogImpl" />
    <when-property-is name="log_level" value="DEBUG" />
  </replace-with>

  <replace-with class="com.allen_sauer.gwt.log.client.impl.LogImplInfo">
    <when-type-is class="com.allen_sauer.gwt.log.client.impl.LogImpl" />
    <when-property-is name="log_level" value="INFO" />
  </replace-with>

  <replace-with class="com.allen_sauer.gwt.log.client.impl.LogImplWarn">
    <when-type-is class="com.allen_sauer.gwt.log.client.impl.LogImpl" />
    <when-property-is name="log_level" value="WARN" />
  </replace-with>

  <replace-with class="com.allen_sauer.gwt.log.client.impl.LogImplError">
    <when-type-is class="com.allen_sauer.gwt.log.client.impl.LogImpl" />
    <when-property-is name="log_level" value="ERROR" />
  </replace-with>

  <replace-with class="com.allen_sauer.gwt.log.client.impl.LogImplFatal">
    <when-type-is class="com.allen_sauer.gwt.log.client.impl.LogImpl" />
    <when-property-is name="log_level" value="FATAL" />
  </replace-with>

  <replace-with class="com.allen_sauer.gwt.log.client.impl.LogImplOff">
    <when-type-is class="com.allen_sauer.gwt.log.client.impl.LogImpl" />
    <when-property-is name="log_level" value="OFF" />
  </replace-with>


  <!-- User agent dependent implementations -->

  <replace-with class="com.allen_sauer.gwt.log.client.util.impl.DOMUtilImplOpera">
    <when-type-is class="com.allen_sauer.gwt.log.client.util.impl.DOMUtilImpl" />
    <when-property-is name="user.agent" value="opera" />
  </replace-with>

  <replace-with class="com.allen_sauer.gwt.log.client.util.impl.DOMUtilImplSafari">
    <when-type-is class="com.allen_sauer.gwt.log.client.util.impl.DOMUtilImpl" />
    <when-property-is name="user.agent" value="safari" />
  </replace-with>

  <replace-with class="com.allen_sauer.gwt.log.client.util.impl.DOMUtilImplIE6">
    <when-type-is class="com.allen_sauer.gwt.log.client.util.impl.DOMUtilImpl" />
    <when-property-is name="user.agent" value="ie6" />
  </replace-with>

  <replace-with class="com.allen_sauer.gwt.log.client.util.impl.DOMUtilImplMozilla">
    <when-type-is class="com.allen_sauer.gwt.log.client.util.impl.DOMUtilImpl" />
    <when-property-is name="user.agent" value="gecko1_8" />
  </replace-with>

  <replace-with class="com.allen_sauer.gwt.log.client.util.impl.DOMUtilImplMozillaOld">
    <when-type-is class="com.allen_sauer.gwt.log.client.util.impl.DOMUtilImpl" />
    <when-property-is name="user.agent" value="gecko" />
  </replace-with>


  <entry-point class="com.allen_sauer.gwt.log.client.Log"/>

</module>
